/* Modified from https://github.com/christorange/VerticalFox/blob/main/windows/userChrome.css */
/* SIDEBERY */
/*
:root:not([customizing]) {
    .tab[selected="true"] {
        visibility: collapse;
        height: 0px;
    }

    .tabbrowser-tab {
        visibility: collapse;
        height: 0px;
    }

    .tabbrowser-tab[visuallyselected="true"] {
        visibility: collapse;
        height: 0px;
    }
}
*/

/* AUTO HIDE SIDE BAR */
#sidebar-box[sidebarcommand="_3c078156-979c-498b-8990-85f7987dd929_-sidebar-action"][sidebar-panel-open] {
    position: relative;
    min-width: var(--uc-sb-sidebar-width) !important;
    width: var(--uc-sb-sidebar-width) !important;
    max-width: var(--uc-sb-sidebar-width) !important;
    background-color: transparent !important;
    /** 
     * Raise the z-index of Sidebery on hover
     * so it can appear above #tabbrowser-tabbox.
     * When not hovering, keep the z-index low so the tab box shadow stays on top. 
     */
    @media not -moz-pref("uc.flex.disable-sidebery-autohide") {
        :root:not([titlepreface*="\180e "]) & {
            /** 
             * z-index is a discrete property and doesn't support transition duration.
             * Add a delay equal to other properties' delay + duration
             * so the z-index change happens only after the animation finishes. 
             */
            transition: z-index 0ms linear
                calc(var(--uc-autohide-sidebar-delay) + var(--uc-autohide-transition-duration) + 10ms);
            @media -moz-pref("uc.flex.sidebery-fast-hover-expand") {
                transition: none;
            }
            &:hover {
                transition: z-index 0ms linear calc(var(--uc-hover-sidebar-delay) - 10ms);
                --browser-area-z-index-sidebar: 3;
                /** 
                 * In vertical tab mode, Firefox uses --browser-area-z-index-sidebar
                 * to raise the sidebar's z-index when it needs to overlay the page (e.g. on hover).
                 * In horizontal tab mode, this variable isn't applied, and the sidebar keeps its default z-index.
                 * To make Sidebery appear above the page content in that case, set its z-index directly.
                 */
                z-index: 100;
            }
            @media not -moz-pref("sidebar.revamp") {
                &:has(#sidebar-switcher-target.active) {
                    z-index: 100;
                }
            }
        }
    }
    @media -moz-pref("uc.flex.fully-hide-sidebery"), (display-mode: fullscreen) {
        --browser-area-z-index-sidebar: 3;
        z-index: 100;
    }
    @media not -moz-pref("uc.flex.fully-hide-sidebery") {
        :root:is([titlepreface*="\200c "], [titlepreface*="\200d "]) & {
            --browser-area-z-index-sidebar: 3;
            z-index: 100;
        }
    }

    @media not -moz-pref("sidebar.position_start") {
        direction: rtl;
        &:-moz-locale-dir(rtl) {
            direction: ltr;
        }

        #sidebar-header,
        #sidebar {
            direction: ltr;
            &:-moz-locale-dir(rtl) {
                direction: rtl;
            }
        }
    }

    /* Remove sidebar splitter */
    & + #sidebar-splitter {
        display: none;
    }

    /* Remove sidebar stripe */
    @media -moz-pref("uc.flex.remove-sidebar-stripe") {
        #sidebar {
            border-top: 1px solid light-dark(#ced1d4, #686869b3) !important;
        }
        #sidebar-header {
            display: none;
        }
    }

    /* Hide Sidebery when auto-collapse is disabled but full hiding of Sidebery or fullscreen mode is enabled */
    /* 
     * This @media query uses three comma-separated conditions:
     * 1. If auto-collapse is *not* disabled (`uc.flex.disable-sidebery-autohide` is false), auto-hide applies.
     * 2. If full hiding of Sidebery is enabled (`uc.flex.fully-hide-sidebery`), auto-hide applies regardless of auto-collapse setting.
     * 3. If in fullscreen mode (`display-mode: fullscreen`), auto-hide also applies regardless of auto-collapse setting. 
     */
    @media not -moz-pref("uc.flex.disable-sidebery-autohide"),
        -moz-pref("uc.flex.fully-hide-sidebery"),
        (display-mode: fullscreen) {
        :root:not([sidebar-expand-on-hover], [titlepreface*="\180e "]) & {
            #sidebar {
                will-change: min-width;
                min-width: var(--uc-sb-sidebar-width) !important;
                transition: min-width var(--uc-autohide-transition-duration) var(--uc-autohide-transition-type)
                    var(--uc-autohide-sidebar-delay) !important;
                @media -moz-pref("uc.flex.sidebery-fast-hover-expand") {
                    transition: none !important;
                }
            }

            &:hover #sidebar,
            #sidebar-header:has(#sidebar-switcher-target.active) + .sidebar-browser-stack #sidebar {
                min-width: var(--uc-sb-sidebar-hover-width) !important;
                transition: min-width var(--uc-hover-transition-duration) var(--uc-autohide-transition-type)
                    var(--uc-hover-sidebar-delay) !important;
            }
        }
    }
    /* 
     * The [titlepreface*="\180e "] attribute has the same effect as 
     * `uc.flex.disable-sidebery-autohide`. However, unlike 
     * `uc.flex.disable-sidebery-autohide`, it cannot be used in media 
     * queries alongside `uc.flex.fully-hide-sidebery` and fullscreen mode.
     * Therefore, we need to duplicate the same rules here specifically 
     * for the [titlepreface*="\180e "] case. 
     */
    @media -moz-pref("uc.flex.fully-hide-sidebery"), (display-mode: fullscreen) {
        :root:is([sidebar-expand-on-hover], [titlepreface*="\180e "]) & {
            #sidebar {
                will-change: min-width;
                min-width: var(--uc-sb-sidebar-width) !important;
                transition: min-width var(--uc-autohide-transition-duration) var(--uc-autohide-transition-type)
                    var(--uc-autohide-sidebar-delay) !important;
                @media -moz-pref("uc.flex.sidebery-fast-hover-expand") {
                    transition: none !important;
                }
            }

            &:hover #sidebar,
            #sidebar-header:has(#sidebar-switcher-target.active) + .sidebar-browser-stack #sidebar {
                min-width: var(--uc-sb-sidebar-hover-width) !important;
                transition: min-width var(--uc-hover-transition-duration) var(--uc-autohide-transition-type)
                    var(--uc-hover-sidebar-delay) !important;
            }
        }
    }
    /* 
     * The [titlepreface*="\200c "] and [titlepreface*="\200d "] attributes 
     * behave the same as `uc.flex.fully-hide-sidebery`. For the same reason 
     * as above, we need to duplicate the rules here specifically for these 
     * cases, since attribute selectors can't be combined with media queries. 
     */
    @media not -moz-pref("uc.flex.fully-hide-sidebery") {
        :root:is([titlepreface*="\200c "], [titlepreface*="\200d "]) & {
            #sidebar {
                will-change: min-width;
                min-width: var(--uc-sb-sidebar-width) !important;
                transition: min-width var(--uc-autohide-transition-duration) var(--uc-autohide-transition-type)
                    var(--uc-autohide-sidebar-delay) !important;
                @media -moz-pref("uc.flex.sidebery-fast-hover-expand") {
                    transition: none !important;
                }
            }

            &:hover #sidebar,
            #sidebar-header:has(#sidebar-switcher-target.active) + .sidebar-browser-stack #sidebar {
                min-width: var(--uc-sb-sidebar-hover-width) !important;
                transition: min-width var(--uc-hover-transition-duration) var(--uc-autohide-transition-type)
                    var(--uc-hover-sidebar-delay) !important;
            }
        }
    }

    .sidebar-panel {
        background-color: transparent !important;
        color: var(--newtab-text-primary-color) !important;
    }

    .sidebar-panel #search-box {
        -moz-appearance: none !important;
        appearance: none !important;
        background-color: rgba(249, 249, 250, 0.1) !important;
        color: inherit !important;
    }

    /* Add sidebar divider and give it background */
    /*
    & #sidebar,
    & #sidebar-header {
        background-color: inherit !important;
        border-inline: 1px solid rgb(80, 80, 80);
        border-inline-width: 0px 1px;
    }

    &:not([sidebar-positionend]) > :-moz-locale-dir(rtl),
    &[sidebar-positionend] > * {
        border-inline-width: 1px 0px;
    }
    */

    /* Move statuspanel to the other side when sidebar is hovered so it doesn't get covered by sidebar */
    /*
    &:not([sidebar-positionend]):hover ~ #appcontent #statuspanel {
        inset-inline: auto 0px !important;
    }
    &:not([sidebar-positionend]):hover ~ #appcontent #statuspanel-label {
        margin-inline: 0px !important;
        border-left-style: solid !important;
    }
    */
}
